{"version":3,"sources":["lib.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["nja2osm","input","output","pref","city","countyMatch","match","suburbMatch","town","chomeMatch","addr","koazaMatch","banchiGoMatch","bldgMatch","levels","formatOsmAddr","out","Object","entries","key","value","App","React","useState","undefined","result","setResult","onSubmit","useCallback","ev","a","preventDefault","inputText","currentTarget","normalize","normalized","osmNormalized","className","type","name","placeholder","level","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfc8df0e.chunk.js","sourcesContent":["import { NormalizeResult } from '@geolonia/normalize-japanese-addresses';\n\nexport interface OsmAddress {\n  /** 日本の場合は `JP` に固定 */\n  'addr:country'?: string\n  /** 都道府県 */\n  'addr:province'?: string  \n  /** 〇〇郡 */\n  'addr:county'?: string\n  /** 〇〇市町村 */\n  'addr:city'?: string\n  /** 〇〇区(政令指定都市の区以外の区も含む) */\n  'addr:suburb'?: string\n  /** 〇〇大字 / (市町村配下の)町 */\n  'addr:quarter'?: string\n  /** 〇〇小字 / 字 / 丁 / 丁目 / 島嶼部 */\n  'addr:neighbourhood'?: string\n  /** 〇〇街区符号 / 番 / 番地 / 地番 (無番地の場合はこの部分に\"無番地\"と記載) */\n  'addr:block_number'?: string\n  /** 〇〇住居番号 / 号 / 支号 / 枝番号 */\n  'addr:housenumber'?: string\n  /** 〇〇複合住宅 / 施設の名称 */\n  'addr:flats'?: string\n  /** 〇〇複合住宅 / 施設の部屋番号 */\n  'addr:room'?: string\n  /** 〇〇複合住宅 / 施設の階層 */\n  'addr:floor'?: string\n}\n\nexport const nja2osm: (input: NormalizeResult) => OsmAddress = (input) => {\n  const output: OsmAddress = {\n    'addr:country': 'JP',\n  };\n\n  if (input.pref) output['addr:province'] = input.pref;\n  if (input.city) {\n    const countyMatch = input.city.match(/^([^郡]*郡)(.*)$/);\n    const suburbMatch = input.city.match(/^([^市]+市)?([^区]+区)$/);\n    if (countyMatch) {\n      output['addr:county'] = countyMatch[1];\n      output['addr:quarter'] = countyMatch[2];\n    } else if (suburbMatch) {\n      if (suburbMatch[1]) {\n        // 政令指定都市の区の場合はcityも指定しなければならない\n        output['addr:city'] = suburbMatch[1];\n      }\n      output['addr:suburb'] = suburbMatch[2];\n    } else {\n      output['addr:city'] = input.city;\n    }\n  }\n  if (input.town) {\n    const chomeMatch = input.town.match(/^(.*?)([一二三四五六七八九十]+丁目)$/);\n    if (chomeMatch) {\n      output['addr:quarter'] = chomeMatch[1];\n      output['addr:neighbourhood'] = chomeMatch[2];\n    } else {\n      output['addr:quarter'] = input.town;\n    }\n  }\n  if (input.addr) {\n    let addr = input.addr;\n    const koazaMatch = addr.match(/^([^\\d]+)(.*)$/);\n    if (koazaMatch) {\n      addr = koazaMatch[2];\n      output['addr:neighbourhood'] = koazaMatch[1];\n    }\n    const banchiGoMatch = addr.match(/^^([\\d]+)(?:-([\\d]+))?(.*)$/);\n    if (banchiGoMatch) {\n      output['addr:block_number'] = banchiGoMatch[1];\n      if (banchiGoMatch[2]) {\n        output['addr:housenumber'] = banchiGoMatch[2];\n      }\n      if (banchiGoMatch[3]) {\n        const other = banchiGoMatch[3];\n        const bldgMatch = other.match(/^([^\\d]+)(?:([\\d]+)?|(?:([\\d]+)(?:F|階|カイ)))$/);\n        if (bldgMatch) {\n          output['addr:flats'] = bldgMatch[1];\n          if (bldgMatch[2]) {\n            output['addr:room'] = bldgMatch[2];\n          }\n          if (bldgMatch[3]) {\n            output['addr:floor'] = bldgMatch[3];\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n};","import React from \"react\";\nimport { normalize, NormalizeResult } from '@geolonia/normalize-japanese-addresses';\nimport { nja2osm, OsmAddress } from \"./lib\";\n\ninterface Result {\n  input: string\n  normalized: NormalizeResult\n  osmNormalized: OsmAddress\n}\n\nconst levels = [\n  '正規化ができませんでした。',\n  '都道府県名までの正規化ができました。',\n  '市区町村名までの正規化ができました。',\n  '町丁目までの正規化ができました。',\n];\n\nconst formatOsmAddr = (input: OsmAddress) => {\n  let out = \"\";\n  for (const [ key, value ] of Object.entries(input)) {\n    out += `${key}=${value}\\n`;\n  }\n  return out;\n}\n\nconst App: React.FC = () => {\n  const [ result, setResult ] = React.useState<Result | undefined>(undefined)\n\n  const onSubmit = React.useCallback(async (ev: React.FormEvent) => {\n    ev.preventDefault();\n    const inputText = (ev.currentTarget as any)['input']?.value;\n    if (!inputText) return;\n    const normalized = await normalize(inputText);\n\n    setResult({\n      input: inputText,\n      normalized,\n      osmNormalized: nja2osm(normalized),\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"mb-3 mt-5\">\n        <div className=\"mb-3\">\n          <input type=\"text\" name=\"input\" className=\"form-control\" placeholder=\"住所を入力してください。\" />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">正規化</button>\n      </form>\n      { typeof result !== 'undefined' && <dl className=\"row\">\n        <dt className=\"col-sm-2 text-end\">入力</dt>\n        <dd className=\"col-sm-10\">\n          <p>{result.input}</p>\n          <p>正規化レベル: [{result.normalized.level}] {levels[result.normalized.level]}</p>\n        </dd>\n\n        <dt className=\"col-sm-2 text-end\">NJA正規化</dt>\n        <dd className=\"col-sm-10\"><pre>{JSON.stringify(result.normalized, undefined, 2)}</pre></dd>\n\n        <dt className=\"col-sm-2 text-end\">OSM正規化</dt>\n        <dd className=\"col-sm-10\"><pre>{formatOsmAddr(result.osmNormalized)}</pre></dd>\n      </dl> }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}